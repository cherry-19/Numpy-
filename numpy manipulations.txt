# NUMPY

# This library is the main library for scientific computing in Python.
 It provides high-performance multidimensional array object, and tools for working with these arrays.

# importing required modules to insert an image
from google.colab import files
from IPython.display import Image

uploaded = files.upload()

Image('image.png')

import numpy as np

# How to create an array?
a = np.array([1,2,3]) # All the entries are of int type
b = np.array([1.5, 0, 1]) # All the entries automatically changed to float 
c = np.array([2.4, 1, 9], dtype = float)

# The above are all 1-Dimensional array


# Multidimensional array

arr = np.array([(1,2,3), (4,5,6)])  #2-D array
print(arr)

arr_1 = np.array([[(1,2,3),(4,5,6)],[(6,7,8), (4,5,6)]])
print(arr_1)


# creating arrays using different functions
my_arr = np.zeros((3,4), dtype = int) #2-D
print(my_arr)
my_arr1 = np.ones((2,2), dtype = np.int16) # 2-D
print(my_arr1)
my_arr2 = np.zeros((3,3,3), dtype = np.int32) # 3-D
print(my_arr2)


my_arr3 = np.arange(0, 51, 5) # The array created is an array of evenly spaced values. 
print(my_arr3)

my_arr4 = np.linspace(0, 2, 9) # 9 numbers bw 0 and 9 at equal intervals, extreme values are included.
print(my_arr4)

#creating a constant array
my_arr5 = np.full((2,2), 0.9)
print(my_arr5)   # creating a 2x2 matrix or 2-D array 

# Creating 2x2 identity matrix
my_arr6 = np.eye(2)
print(my_arr6)

# create an array with random values
import random
my_arr7 = np.random.random((2,2))
print(my_arr7)

# create an empty array
my_arr8 = np.empty((3,2))
print(my_arr8)

ide = np.identity(3)  # identity matrix
ide

# reshaping arrays
my_arr9 = np.arange(99)
print(my_arr9)
ary = my_arr9.reshape(3,33)  # By multiplying these numbers you should get the original number. here, 3*33 = 99.
ary

x = [[1,2,3],[4,5,6],[7,8,9]]
arr_x = np.array(x)
arr_x

arr_x.sum(axis = 1)






# saving and loading on disks 
np.save('my_array', a) # this array defined in the beginnig is now stored on hard disk and now even if the computer is off it will still be there .
# only two parameters 
np.savez('array.npz', a,b,f)
# difference bw np.save and np.savez is : np.save stores a single array and np.savez stores multiple arrays
np.load('my_array.npy')

# Saving and loading text files 
# np.loadtxt("myfile.txt")
np.genfromtxt("EastWestAirlinesNN.csv")
np.savetxt("myarray.txt", a, delimiter = " ")

# How to ask for help
np.info(np.ndarray.dtype)

# inspecting your arrays 
a.shape # gives the dimension of array
len(a)# length of array 
b.ndim # number of dimensions 
e.size # gives the number of elements in array 
b.dtype # gives the data type of elements of array and array consists elements of same datatype
b.dtype.name # only want the name of datatype
b.astype(int) # converts every element into specific datatype(here, int)


#Data types 
np.int64  # signed 64-bit integer types 
np.float32 # standard double precision(means two numbers after the decimal point) floating point 
np.complex # complex numbers represented by 128 floats
np.bool # boolean type storing true or false values
np.object # pyhton object 
np.string_  # fixed length string 
np.unicode # Fixed length unicode type 


# Arithmetic operations 
print(a)
print(b)

g = a-b
g  # 'a' matrix is of dimension 1x3 and 'b' has the dimension 2x3. So in a-b, (1st row of a) - (1st row of a) then (1st row of a) - (2nd row of b)
# alter method to do the same 
np.subtract(a,b)
a+b #Addition
# Alter method
np.add(a,b)
a/b  # Divide 
np.divide(a,b) # Divide using method 
a*b
np.multiply(a,b)  # the dimensions of both the matrices are different but this multiplcation is elementwise and same row is being repeated in 'a' (this is known as broadcasting)
np.exp(b)
np.sqrt(b)
np.sin(a)
np.cos(b)
np.log(a)
# a.dot(b)  only possible when dimensions are same 


# Comparison
a == b  # Comparing each element and gives an output as an array of elements as boolean values(true or false)
a <2 # Elementwise comparison 
np.array_equal(a,b) # full array comparison


from numpy.core.fromnumeric import cumsum
# Aggregate functions 

a.sum() #Sum of all elements of array 'a'
a.min() # gives the minimum element 
b.max(axis = 0) #  setting axis = 0, we are able to find maximum in each column.
b.cumsum(axis = 1) # consider row 1 first, first element remains same, then add 1.5 with 2(1.5+2 = 3.5) , then add 3.5 to 3 = 6.5 , repeat correspondingly in the second row 
a.mean()
np.median(b)
np.corrcoef(a)
np.std(a)

# Copying arrays 
h = a.view() # creating a view of the array with the same data 
np.copy(a) # Creating a copy of array 'a'
h1 = a.copy() # creates a deep copy of 'a' , any changes in 'a' wont affect h1 and vice-versa

# Sorting arrays 
a.sort() #Sort an array
c.sort(axis = 0)  

my_own = np.array([8,4,1,3,6])
np.sort(my_own)# To display also

#Subsetting, Slicing and Indexing 

#Subsetting :

a[2] # Selecting a certain element of an array and indexing starts from 0,1,2,....n 
b[1,2] # Element at row 1 and column 2

# Slicing:

a[0:2] # 2 is excluded 
b[0:2,1] # Selecting all the rows(as there are only two) and column 1 acc. to indexing 
b[:1] # Select row no 0 accoring to indexing and all the columns 
b[0:1, :] # gives the same output as above 
c[1,...] #same as [1,:,:]
#Reversing an array :
a[ : :-1]

# Boolean Indexing :
 
a[a<2] # Selecting elements in a that are less than 2
b[b<9] # will get all the elements 

# Fancy Indexing :

b[[1,0,1,0],[0,1,2,0]] # Selecting elements as (1,0),(0,1),(1,2) and (0,0)




# Array manipulations :

# Transpose of an array 
i = np.transpose(b)
i.T

# Changing array shapes :
b_r = b.ravel() # Flattening the array
b_r
g.reshape(3,-2)

#Adding and removing elements :

np.append(h,g) # Adding elements of g also
np.insert(a, 1, 5) # inserting the no 5 into 'a' at the index 1 
np.delete(a,[1]) # Deleting the element at index 1 


 # Combining arrays :
 np.concatenate((a,d), axis = 0)
 np.vstack((a,b)) # Vertically stacking arrays
 # Alter method to do the same:
 #np.r_[e,f] but dimensions must be the same
 np.hstack((a,d))
# Alter way : np.c_[a,d]

#Splitting arrays :

np.hsplit(b,3) # splitting arrays horizontally 
np.vsplit(b,2) # splitting arrays vertically